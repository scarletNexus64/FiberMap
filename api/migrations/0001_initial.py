# Generated by Django 5.2.4 on 2025-09-22 08:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('type_client', models.CharField(choices=[('LS', 'Client LS (Liaison Spécialisée)'), ('FTTH', 'Client FTTH')], max_length=10)),
                ('type_organisation', models.CharField(choices=[('entreprise', 'Entreprise'), ('banque', 'Banque'), ('particulier', 'Particulier')], max_length=50)),
                ('raison_sociale', models.CharField(blank=True, max_length=255)),
                ('address', models.TextField()),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('numero_ligne', models.CharField(blank=True, max_length=50)),
                ('nom_ligne', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Coupure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('point_estime_lat', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('point_estime_lng', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('distance_sur_segment', models.FloatField(help_text='Distance depuis le début du segment en km', null=True)),
                ('status', models.CharField(choices=[('detectee', 'Détectée'), ('localisee', 'Localisée'), ('en_cours', 'En cours de réparation'), ('reparee', 'Réparée')], default='detectee', max_length=20)),
                ('description_diagnostic', models.TextField(blank=True)),
                ('date_detection', models.DateTimeField(auto_now_add=True)),
                ('date_resolution', models.DateTimeField(blank=True, null=True)),
                ('superviseur_notifie', models.BooleanField(default=False)),
                ('client_notifie', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-date_detection'],
            },
        ),
        migrations.CreateModel(
            name='FAT',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('numero_fat', models.CharField(max_length=50, unique=True)),
                ('numero_fdt', models.CharField(max_length=50)),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11)),
                ('port_splitter', models.CharField(max_length=20)),
                ('capacite_cable_entrant', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_toron', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_brin', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('moue_cable_poteau', models.FloatField(default=0, help_text='Moue sur le poteau en mètres')),
                ('commentaire', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'FAT',
                'verbose_name_plural': 'FATs',
            },
        ),
        migrations.CreateModel(
            name='ParametreApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_parametre', models.CharField(choices=[('otdr', 'Configuration OTDR'), ('carte', 'Configuration carte'), ('notification', 'Configuration notifications'), ('general', 'Configuration générale')], max_length=20)),
                ('cle', models.CharField(max_length=100, unique=True)),
                ('valeur', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Paramètre application',
                'verbose_name_plural': 'Paramètres application',
                'ordering': ['type_parametre', 'cle'],
            },
        ),
        migrations.CreateModel(
            name='TypeLiaison',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('LS', 'Liaison Spécialisée'), ('FTTH', 'FTTH (Fiber To The Home)')], max_length=10)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Type de liaison',
                'verbose_name_plural': 'Types de liaisons',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('technicien', 'Technicien'), ('superviseur', 'Superviseur'), ('commercial', 'Commercial'), ('admin', 'Administrateur')], default='technicien', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Intervention',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_intervention', models.CharField(choices=[('creation', 'Création liaison'), ('modification', 'Modification'), ('depannage', 'Dépannage'), ('maintenance', 'Maintenance préventive'), ('ajout_point', 'Ajout point dynamique')], max_length=20)),
                ('status', models.CharField(choices=[('planifiee', 'Planifiée'), ('en_cours', 'En cours'), ('terminee', 'Terminée'), ('annulee', 'Annulée')], default='planifiee', max_length=20)),
                ('date_planifiee', models.DateTimeField()),
                ('date_debut', models.DateTimeField(blank=True, null=True)),
                ('date_fin', models.DateTimeField(blank=True, null=True)),
                ('duree_estimee', models.DurationField()),
                ('description', models.TextField()),
                ('resume_changement', models.TextField(blank=True)),
                ('materiel_utilise', models.TextField(blank=True)),
                ('rapport_final', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coupure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.coupure')),
                ('fat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.fat')),
                ('technicien_principal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interventions_principales', to=settings.AUTH_USER_MODEL)),
                ('techniciens_secondaires', models.ManyToManyField(blank=True, related_name='interventions_secondaires', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_planifiee'],
            },
        ),
        migrations.CreateModel(
            name='CommitIntervention',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_commit', models.CharField(max_length=255)),
                ('description_detaillee', models.TextField(blank=True)),
                ('hash_commit', models.CharField(max_length=40, unique=True)),
                ('changements_json', models.JSONField()),
                ('date_commit', models.DateTimeField(auto_now_add=True)),
                ('etat_avant', models.JSONField(blank=True, null=True)),
                ('etat_apres', models.JSONField(blank=True, null=True)),
                ('auteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('intervention', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commits', to='api.intervention')),
            ],
            options={
                'ordering': ['-date_commit'],
            },
        ),
        migrations.CreateModel(
            name='Liaison',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom_liaison', models.CharField(max_length=255, unique=True)),
                ('point_central_lat', models.DecimalField(decimal_places=8, max_digits=10)),
                ('point_central_lng', models.DecimalField(decimal_places=8, max_digits=11)),
                ('point_client_lat', models.DecimalField(decimal_places=8, max_digits=10)),
                ('point_client_lng', models.DecimalField(decimal_places=8, max_digits=11)),
                ('status', models.CharField(choices=[('active', 'Active'), ('en_panne', 'En panne'), ('en_cours', 'En cours de réparation'), ('planifiee', 'Planifiée')], default='active', max_length=20)),
                ('distance_totale', models.FloatField(default=0, help_text='Distance totale calculée en km')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liaisons', to='api.client')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='liaisons_creees', to=settings.AUTH_USER_MODEL)),
                ('type_liaison', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.typeliaison')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='intervention',
            name='liaison',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interventions', to='api.liaison'),
        ),
        migrations.AddField(
            model_name='fat',
            name='liaison',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fats', to='api.liaison'),
        ),
        migrations.AddField(
            model_name='coupure',
            name='liaison',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupures', to='api.liaison'),
        ),
        migrations.CreateModel(
            name='MesureOTDR',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('position_technicien', models.CharField(choices=[('central', 'Au central'), ('client', 'Chez le client'), ('intermediaire', 'Point intermédiaire')], max_length=20)),
                ('direction_analyse', models.CharField(choices=[('vers_central', 'Vers le central'), ('vers_client', 'Vers le client')], max_length=20)),
                ('distance_coupure', models.FloatField(help_text='Distance de la coupure en km')),
                ('attenuation', models.FloatField(help_text='Atténuation en dB')),
                ('type_evenement', models.CharField(choices=[('coupure', 'Coupure'), ('attenuation', 'Atténuation excessive'), ('reflet', 'Réflexion'), ('epissure', 'Épissure défectueuse')], max_length=50)),
                ('date_mesure', models.DateTimeField(auto_now_add=True)),
                ('commentaires', models.TextField(blank=True)),
                ('fichier_otdr', models.FileField(blank=True, upload_to='otdr_files/')),
                ('liaison', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mesures_otdr', to='api.liaison')),
                ('technicien', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mesure OTDR',
                'verbose_name_plural': 'Mesures OTDR',
                'ordering': ['-date_mesure'],
            },
        ),
        migrations.AddField(
            model_name='coupure',
            name='mesure_otdr',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.mesureotdr'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_notification', models.CharField(choices=[('coupure', 'Coupure détectée'), ('intervention', 'Intervention planifiée'), ('maintenance', 'Maintenance requise'), ('alerte', 'Alerte système'), ('rapport', 'Rapport disponible')], max_length=20)),
                ('priorite', models.CharField(choices=[('basse', 'Basse'), ('normale', 'Normale'), ('haute', 'Haute'), ('urgente', 'Urgente')], default='normale', max_length=20)),
                ('titre', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('lue', models.BooleanField(default=False)),
                ('date_lecture', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('coupure_concernee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.coupure')),
                ('destinataire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('intervention_concernee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.intervention')),
                ('liaison_concernee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.liaison')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PhotoPoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='points_photos/')),
                ('categorie', models.CharField(choices=[('site', 'Site/Environnement'), ('equipement', 'Équipement'), ('manchon', 'Manchon'), ('chambre_ext', 'Extérieur chambre'), ('chambre_int', 'Intérieur chambre'), ('tiroir', 'Tiroir optique'), ('convertisseur', 'Convertisseur')], max_length=20)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.AddField(
            model_name='intervention',
            name='photos_apres',
            field=models.ManyToManyField(blank=True, related_name='interventions_apres', to='api.photopoint'),
        ),
        migrations.AddField(
            model_name='intervention',
            name='photos_avant',
            field=models.ManyToManyField(blank=True, related_name='interventions_avant', to='api.photopoint'),
        ),
        migrations.CreateModel(
            name='PointDynamique',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_point', models.CharField(choices=[('ONT', 'ONT (Optical Network Terminal)'), ('POP_LS', 'POP LS (Point of Presence LS)'), ('POP_FTTH', 'POP FTTH (Point of Presence FTTH)'), ('chambre', 'Chambre de tirage'), ('manchon', 'Manchon'), ('manchon_aerien', 'Manchon aérien/distribution'), ('FAT', 'FAT (Fiber Access Terminal)'), ('FDT', 'FDT (Fiber Distribution Terminal)')], max_length=20)),
                ('nom', models.CharField(max_length=255)),
                ('ordre', models.IntegerField(default=0, help_text='Ordre du point dans la liaison')),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11)),
                ('distance_depuis_central', models.FloatField(default=0, help_text='Distance cumulée en km depuis le central')),
                ('description', models.TextField(blank=True)),
                ('commentaire_technicien', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('liaison', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_dynamiques', to='api.liaison')),
            ],
            options={
                'verbose_name': 'Point dynamique',
                'verbose_name_plural': 'Points dynamiques',
                'ordering': ['liaison', 'ordre'],
                'unique_together': {('liaison', 'ordre')},
            },
        ),
        migrations.AddField(
            model_name='photopoint',
            name='point_dynamique',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='api.pointdynamique'),
        ),
        migrations.AddField(
            model_name='mesureotdr',
            name='point_mesure',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.pointdynamique'),
        ),
        migrations.CreateModel(
            name='FicheTechnique',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('modele_equipement', models.CharField(blank=True, max_length=100)),
                ('numero_serie', models.CharField(blank=True, max_length=100)),
                ('fabricant', models.CharField(blank=True, max_length=100)),
                ('date_installation', models.DateField(blank=True, null=True)),
                ('specifications_json', models.JSONField(blank=True, null=True)),
                ('manuel_url', models.URLField(blank=True)),
                ('notes_maintenance', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('point_dynamique', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.pointdynamique')),
            ],
            options={
                'verbose_name': 'Fiche technique',
                'verbose_name_plural': 'Fiches techniques',
            },
        ),
        migrations.AddField(
            model_name='fat',
            name='point_dynamique',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='detail_fat', to='api.pointdynamique'),
        ),
        migrations.CreateModel(
            name='DetailPOPLS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_brins_convertisseur', models.IntegerField(choices=[(1, '1'), (2, '2')])),
                ('type_connecteur_convertisseur', models.CharField(choices=[('FC', 'FC'), ('LC', 'LC'), ('SC', 'SC')], max_length=10)),
                ('nombre_brins_tiroir', models.IntegerField(choices=[(1, '1'), (2, '2')])),
                ('capacite_cable', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_toron', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_brin', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('numero_port_tiroir', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('type_connecteur_tiroir', models.CharField(choices=[('FC', 'FC'), ('LC', 'LC'), ('SC', 'SC')], max_length=10)),
                ('moue_cable', models.FloatField(default=0, help_text='Moue de câble en mètres')),
                ('point_dynamique', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detail_pop_ls', to='api.pointdynamique')),
            ],
        ),
        migrations.CreateModel(
            name='DetailPOPFTTH',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_olt', models.CharField(max_length=100)),
                ('port_olt', models.CharField(max_length=50)),
                ('reference_odf', models.CharField(max_length=100)),
                ('numero_fdt', models.CharField(max_length=50)),
                ('quantieme_cassette', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('numero_port_cassette', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('capacite_cable', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_toron', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_brin', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('point_dynamique', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detail_pop_ftth', to='api.pointdynamique')),
            ],
        ),
        migrations.CreateModel(
            name='DetailONT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_serie', models.CharField(max_length=100)),
                ('numero_ligne', models.CharField(max_length=50)),
                ('nom_ligne', models.CharField(max_length=100)),
                ('couleur_brin_fat', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('moue_cable', models.FloatField(default=0, help_text='Moue de câble en mètres')),
                ('point_dynamique', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detail_ont', to='api.pointdynamique')),
            ],
        ),
        migrations.CreateModel(
            name='DetailManchon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacite_cable_entrant', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_toron_entrant', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_brin_entrant', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('capacite_cable_sortant', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_toron_sortant', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_brin_sortant', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('moue_cable', models.FloatField(default=0, help_text='Moue de câble en mètres')),
                ('is_aerien', models.BooleanField(default=False)),
                ('point_dynamique', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detail_manchon', to='api.pointdynamique')),
            ],
        ),
        migrations.CreateModel(
            name='DetailFDT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_fdt', models.CharField(max_length=50)),
                ('capacite_cable_transport', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_brin_transport', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_toron_transport', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('cassette_transport', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('port_cassette_transport', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('capacite_cable_distribution', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_brin_distribution', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_toron_distribution', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('cassette_distribution', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('port_cassette_distribution', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('point_dynamique', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detail_fdt', to='api.pointdynamique')),
            ],
        ),
        migrations.CreateModel(
            name='DetailChambre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacite_cable_central', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_toron_central', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_brin_central', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('moue_cable_central', models.FloatField(default=0, help_text='Moue côté central en mètres')),
                ('capacite_cable_client', models.IntegerField(choices=[(96, '96 FO'), (48, '48 FO'), (24, '24 FO'), (18, '18 FO'), (12, '12 FO'), (6, '6 FO'), (2, '2 FO')])),
                ('couleur_toron_client', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('couleur_brin_client', models.CharField(choices=[('blue', 'Bleu'), ('orange', 'Orange'), ('vert', 'Vert'), ('marron', 'Marron'), ('gris', 'Gris'), ('blanc', 'Blanc'), ('rouge', 'Rouge'), ('noir', 'Noir'), ('jaune', 'Jaune'), ('violet', 'Violet'), ('rose', 'Rose'), ('turquoise', 'Turquoise')], max_length=20)),
                ('moue_cable_client', models.FloatField(default=0, help_text='Moue côté client en mètres')),
                ('point_dynamique', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detail_chambre', to='api.pointdynamique')),
            ],
        ),
        migrations.AddField(
            model_name='coupure',
            name='point_dynamique_proche',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.pointdynamique'),
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('distance_gps', models.FloatField(help_text='Distance GPS en km')),
                ('distance_cable', models.FloatField(help_text='Distance réelle du câble posé en km (incluant moue)')),
                ('trace_coords', models.JSONField(default=list, help_text='Coordonnées du tracé [[lat, lng], ...]')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('liaison', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='segments', to='api.liaison')),
                ('point_arrivee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='segments_arrivee', to='api.pointdynamique')),
                ('point_depart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='segments_depart', to='api.pointdynamique')),
            ],
            options={
                'ordering': ['point_depart__ordre'],
                'unique_together': {('point_depart', 'point_arrivee')},
            },
        ),
        migrations.AddField(
            model_name='coupure',
            name='segment_touche',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.segment'),
        ),
    ]
